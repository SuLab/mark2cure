extends instructions/home


block header
  - with headerMessage='Gene <i class="fa fa-angle-right" aria-hidden="true"></i> Drug'
    include includes/header


block breadcrumb
  li
    a(href='{% url "instructions:relation" %}') Relation Task
  li.active Relationships
  li.active Gene <i class="fa fa-angle-right" aria-hidden="true"></i> Drug


block js-libs
  {{block.super}}

  script(src="https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.5/d3.min.js")
  script(src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js")


block instructions-content
  #instructions-content


block post-footer
  script.
    var margin = {top: 50, right: 20, bottom: 20, left: 20},
        width = 800 - margin.left - margin.right,
        barHeight = 60,
        barWidth = width * .45;

    var i = 0,
        duration = 550,
        root;

    var tree = d3.layout.tree()
        .nodeSize([0, 20]);

    var diagonal = d3.svg.diagonal()
        .projection(function(d) { return [d.y, d.x]; });

    var svg = d3.select('#instructions-content').append("svg:svg")
        .attr("width", width + margin.left + margin.right)
        .append("g")
        .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

    root = {
      "id": "1-1-1-1-1-1",
      "text": "Gene + drug relationship",
      "desc": "Gene + drug relationship definitions",
      "example": "Hover over items for more information.",
      "children": [{
        "id": "1",
        "text": "Relates to",
        "desc": "The gene is related to the drug in some manner.",
        "example": "The drug ACTH was given to a patient with a mutation in NGLY1 and had adverse effects.",
        "children": [{
          "id": "1-1",
          "text": "Affects",
          "desc": "The gene affects the activity of the drug.",
          "example": "Codeine is metabolized by CYP2D6 to its active metabolite, morphine",
          }, {
          "id": "1-2",
          "text": "Is affected by",
          "desc": "Gene expression is induced or inhibited by the drug.",
          "example": "Saint-John's wort, a common herbal remedy inhibits CYP1A1.",
          }]}, {
        "id": "2",
        "text": "Has no relation to",
        "desc": "The gene does not relate to the drug.",
        "example": "The drug ACTH was given to a patient with a mutation in NGLY1."
      }]
    }


    function update(source) {

      // Compute the flattened node list. TODO use d3.layout.hierarchy.
      var nodes = tree.nodes(root);

      var height = Math.max(500, nodes.length * barHeight + margin.top + margin.bottom);

      d3.select("svg").transition()
          .duration(duration)
          .attr("height", height * 1.5);

      d3.select(self.frameElement).transition()
          .duration(duration)
          .style("height", height + "px");

      // Compute the "layout".
      nodes.forEach(function(n, i) {
        n.x = i * (barHeight * 1.3);
      });

      // Update the nodes…
      var node = svg.selectAll("g.node")
          .data(nodes, function(d) { return d.pid || (d.pid = ++i); });


      var nodeEnter = node.enter().append("g")
          .attr("class", "node")
          .attr("transform", function(d) { return "translate(" + source.y0 + "," + source.x0 + ")"; })
          .style("opacity", 1e-6);



      // COPIED from http://bl.ocks.org/mbostock/1087001
      var div = d3.select("body").append("div")
          .attr("class", "tooltip instructions-content")
          .style("opacity", 1e-6);

      nodeEnter.append("rect")
          .attr("y", -barHeight / 2)
          .attr("x", indent_of)
          .attr("height", barHeight)
          .attr("width", barWidth)
          .style("fill", color)
          // .on("click", click)
          .on("mouseover", function() {
          div.attr("class", "tooltip").transition()
              .duration(0)
              .style("opacity", 1);
            }
        )
          .on("mousemove", function(d) {
            div
                .style("left", (d3.event.pageX + 10) + "px")
                .style("top", (d3.event.pageY - 12) + "px")
                .html("<h3>Definition:</h3>" + d.desc + "<h3>Example:</h3>" + d.example);
          })
          .on("mouseout", function() {
          div.attr("class", "tooltip")
              .transition()
              .duration(500)
              .style("opacity", 1e-6);
            }
        );

      nodeEnter.append("text")
          .attr("dy", -3)
          .attr("dx", function(obj) { return indent_of(obj)+20; })
          .text(function(d) {
            var my_text = "   " + d.text;
            return my_text;
          });

      // Transition nodes to their new position.
      nodeEnter.transition()
          .duration(duration)
          .attr("transform", function(d) { return "translate(" + d.y + "," + d.x + ")"; })
          .style("opacity", 1);

      node.transition()
          .duration(duration)
          .attr("transform", function(d) { return "translate(" + d.y + "," + d.x + ")"; })
          .style("opacity", 1)
          .select("rect")
          .style("fill", color);

      // Transition exiting nodes to the parent's new position.
      node.exit().transition()
          .duration(duration)
          .attr("transform", function(d) { return "translate(" + source.y + "," + source.x + ")"; })
          .style("opacity", 1e-6)
          .remove();

      // Update the links…
      var link = svg.selectAll("path.link")
          .data(tree.links(nodes), function(d) { return d.target.id; });

      // Enter any new links at the parent's previous position.
      link.enter().insert("path", "g")
          .attr("class", "link")
          .attr("d", function(d) {
            var o = {x: source.x0, y: source.y0};
            return diagonal({source: o, target: o});
          })
        .transition()
          .duration(duration)
          .attr("d", diagonal);

      // Transition links to their new position.
      link.transition()
          .duration(duration)
          .attr("d", diagonal);

      // Transition exiting nodes to the parent's new position.
      link.exit().transition()
          .duration(duration)
          .attr("d", function(d) {
            var o = {x: source.x, y: source.y};
            return diagonal({source: o, target: o});
          })
          .remove();

      // Stash the old positions for transition.
      nodes.forEach(function(d) {
        d.x0 = d.x;
        d.y0 = d.y;
      });
    }



    update(root);



    // Toggle children on click.
    function click(d) {
      if (d.children) {
        d._children = d.children;
        d.children = null;
      } else {
        d.children = d._children;
        d._children = null;
      }
      update(d);
    }

    function indent_of(d) {
      var my_string = d.id;
      if (my_string.length === 1) {
        indent = 100;
      } else if (my_string.length === 3) {
        indent = 150;
      } else if (my_string.length === 5) {
        indent = 200;
      } else {
        indent = 0;
    }
    return indent;
    };

    function color(d) {
      var my_string = d.id;
      if (my_string.length === 1) {
        return "#9e9ac8";
      } else if (my_string.length === 3) {
          return "#6a51a3";
      } else if (my_string.length === 5) {
          return "#3f007d";
      } else {
        return "#dadaeb";
      }
    };



    </script>
    </body>
