extends base

- load widget_tweaks
- load humanize


block header
  - with headerMessage=task.name
    include includes/header-task-relation


block content

  .container-fluid
    #quest-guide.row
      .col-xs-10.col-xs-offset-1.col-md-7.col-md-offset-1.col-lg-8.col-lg-offset-1
        ul#progress-bar.list-unstyled.list-inline

      .col-xs-10.col-xs-offset-1.col-md-3.col-md-offset-0.col-lg-2.col-lg-offset-0
        p.text-xs-center Score: <span id='score'>#{user.userprofile.score}</span>

    #feedback-next-action-area(style='display:none;').row
      .col-xs-12.col-md-10.col-md-offset-1
        #chart
      .col-xs-12.col-md-10.col-md-offset-1
        ul#chart-list.list-unstyled

      .col-xs-10.col-xs-offset-1.col-sm-10.col-sm-offset-1.col-md-4.col-md-offset-4
        button(id='next_button').btn.btn-primary.btn-block Next

    #tree-action-area


    #document-action-area
      .row
        .col-xs-12.col-md-10.col-md-offset-1
          div(id="doc_{{document.pk}}", data-doc_pk="{{document.pk}}", data-pmid="{{document.document_id}}", style="cursor: not-allowed;").document
            .paragraphs(style="cursor: not-allowed;")

      .row(style="display:none;")
        form(id="task_relation_submit_document_set", action='{% url "task-relation:task" document_pk=document.pk %}', method='POST')
          - csrf_token

      .row.m-t-1
        .col-sm-5.col-md-3.col-md-offset-1.hidden-xs-down
          div(role="group").btn-group-vertical
            a(href='{% url "instructions:relation" %}', style='background-color:#fff; color:#7F3CFF; border-color:#7F3CFF; border-width:3px').btn.btn-default
              | Relation Instructions  <i class="fa fa-external-link fa-lg"></i>

            a(href='{% url "instructions:relation-definition-disease" %}', style='background-color: #d1f3ff;').btn.btn-default
              | Disease Concept  <i class="fa fa-external-link fa-lg"></i>

            a(href='{% url "instructions:relation-definition-gene" %}', style='background-color:rgb(177, 255, 168);').btn.btn-default
              | Genes Concept  <i class="fa fa-external-link fa-lg"></i>

            a(href='{% url "instructions:relation-definition-drug" %}', style='background-color:rgb(255, 209, 220);').btn.btn-default
              | Drugs Concept  <i class="fa fa-external-link fa-lg"></i>


block post-footer

  <script id="tree-template" type="x-template/underscore">
  <div id="tree" class="row text-xs-center">

  <div id="tree-progress" class="col-xs-12"></div>
  <div id="tree-selection" class="col-xs-12"></div>
  <div id="tree-selection-results" class="col-xs-12"></div>
  <div id="tree-text" class="col-xs-12"></div>

  </div>
  </script>



  <script id="reextraction-template" type="x-template/underscore">
  <div id="tree" class="row text-xs-center">

  <div class="concept col-xs-10 col-xs-offset-1 col-sm-4 col-sm-offset-0 col-md-3" id="c1">
  <i id="c1_not_correct" class="fa fa-times-circle"></i>
  <h3><%= concepts.c1.text %></h3>
  <p class="not_correct_stype"></p>
  </div>

  <div class="col-xs-10 col-xs-offset-1 col-sm-4 col-sm-offset-0 col-md-6" style="padding-bottom:10px; padding-top:10px;">
  <div id="selected-choice"></div>
  <div id="rechoices-list"></div>
  </div>

  <div class="concept col-xs-10 col-xs-offset-1 col-sm-4 col-sm-offset-0 col-md-3" id="c2">
  <i id="c2_not_correct" class="fa fa-times-circle"></i>
  <h3><%= concepts.c2.text %></h3>
  <p class="not_correct_stype"></p>
  </div>
  </div>

  <div id="tree-confirm" class="row"></div>
  </script>

  script.
    var RETreeApp = Backbone.Marionette.Application.extend({
      region: '#tree-action-area',

      onStart: function() {
        var main = this.getRegion();

        main.show( new Tree({
          'csrf_token': "{{csrf_token}}",
          'document_pk': "{{ document.pk }}",
          'document_pmid': "{{ document.document_id }}"
          })
        );
      }
    });
    var tree_app = new RETreeApp();
    tree_app.start();


    // var collection;
    // var passages, regions, tmp_passages;
    //
    // YPet.addInitializer(function(options) {
    //
    //   Backbone.Radio.DEBUG = true;
    //   YPet['convoChannel'] = Backbone.Radio.channel('ypet');
    //
    //   $.getJSON('/document/pubtator/'+relation_task_settings.document_pmid+'.json', function( data ) {
    //     /* The Annotation information has been returned from the server at this point
    //        it is now safe to start YPET */
    //     passages = data.collection.document.passage;
    //     regions = {};
    //
    //     _.each(passages, function(passage, passage_idx) {
    //       var section_id =  _.find(passage.infon, function(o){return o['@key']=='id';})['#text'];
    //       var p_body = '<div id="'+ section_id +'" class="paragraph-box m-t-1"><p class="paragraph"></p></div></div>';
    //       $('.paragraphs').append(p_body);
    //       regions[''+passage_idx] = '#'+section_id;
    //     });
    //     YPet.addRegions(regions);
    //
    //     _.each(passages, function(passage, passage_idx) {
    //       var p = new Paragraph({'text': passage.text});
    //       YPet[''+passage_idx].show( new WordCollectionView({
    //         collection: p.get('words'),
    //       }) );
    //       YPet[''+passage_idx].currentView.drawBioC(null, true);
    //     });
    //
    //     /* The Annotation information has been returned from the server at this point
    //        it is now safe to start Tree */
    //
    //     /* Initalize the page by loading all relation tasks
    //      * and fetching all required data */
    //     $.getJSON('/task/relation/'+ relation_task_settings.document_pk +'/api/', function(data) {
    //       if(relation_task_settings) {
    //
    //         /* Initalize the Application, but load events later */
    //         Tree.start();
    //
    //         /* Onload request all relation tasks to complete */
    //         collection = new RelationTaskCollection(data);
    //         /* Sort the collection by C1 on initial data load */
    //         var new_collection = _.sortBy(collection.models, function(c) {
    //           return c.attributes.concepts.c1.text;
    //         });
    //         collection.models = new_collection;
    //         collection.next();
    //
    //         var current_relationship = collection.findWhere({'current': true});
    //         add_relation_classes(current_relationship);
    //         /* Init Progressbar event listner */
    //         (new ProgressView({
    //           collection: collection,
    //           el: '#progress-bar'
    //         })).render();
    //
    //       } else {
    //         /* There were no relation tasks to complete for this document (scoped to this user) */
    //         alert('Sorry, there was a problem.');
    //       }
    //     });
    //
    //
    //   });
    //
    //   var show_alert = _.debounce(function(evt) {
    //     var $box = $(evt.target).closest('div[class^="paragraph-box"]');
    //     if( $box.hasClass('paragraph-box-error-alert') ) {
    //       $box.removeClass('paragraph-box-error-alert');
    //     } else {
    //       $box.addClass('paragraph-box-error-alert');
    //     }
    //   }, 500);
    //
    //   YPet['convoChannel'].on('mouse-down', function(evt) {
    //     show_alert(evt);
    //   });
    //
    // });
    // YPet.start();
    //

