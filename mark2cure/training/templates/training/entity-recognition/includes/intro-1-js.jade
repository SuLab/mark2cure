<script id="alert-template" type="text/template">
<div class="alert alert-warning alert-training col-md-10 col-md-offset-1" role="alert">
<p class='lead text-xs-center'>Sorry! <strong><%= text %></strong> doesn't appear to be correct.</p>

<% if (help_message) { %>
<p class='lead text-xs-center'><%= help_message %></p>

<% }; if (instructions_link) { %>
<p class='lead text-xs-center'><%= instructions_link %></p>

<% } %>
</div>
</script>

script.
  var incorrect_counter = 0;
  var validate = function(needle, gold) {
    var all_match = true;
    _.each(gold, function(gold_item) {
      var matches = _.filter(needle.toJSON(), function(obj) {
        return obj.start == gold_item.start && obj.text == gold_item.text }).length;
      if(!matches) { all_match = false; }
    });

    return all_match;
  };

  $('#next-container').popover({
    trigger: "hover",
    title: "Keep Going!",
    content: "Please complete the task before moving forward.",
    placement: "top",
    container: "body"
  });

  var load_initial_data =  function(options) {
    YPet = new Backbone.Marionette.Application({
      region: "#quest"
    });

    var p = new Paragraph({'text': $('p.paragraph').text().trim()});
    YPet.AnnotationTypes = new AnnotationTypeList([{name: 'Disease', color: '#d1f3ff'}]);
    YPet.getRegion().show(new WordCollectionView({collection: p.get('words')}));
  };

  load_initial_data();

  YPet.start();

  $('a').on('click', function(evt) {
    if( $(this).hasClass('disabled') ) {
      evt.preventDefault();
    }
  });

  var correct = function() {
    $('#partner').slideDown();
    $('#next-container').popover('disable');
    $('#next').attr('disabled', false).removeClass('disabled');
    window.scrollTo(0,document.body.scrollHeight);
  };

  var check_common_mistakes = function(text) {
    var universal_help = _.findWhere(help, {text: '*'});
    if(universal_help) { return universal_help.msg; }

    var specific_help = _.findWhere(help, {text: text});
    if(specific_help) { return specific_help.msg; }
    return '';
  };

  YPet.getRegion().currentView.collection.parentDocument.get('annotations').on('add', function(model, collection) {
    var model_json = model.toJSON();
    /*
     * Check if the array doesn't contain the selected word.
     * 1) Alert if (contains/overlap/miss)error 2) Unselect
     */
    if( !_.filter(answers, function(obj) { return model_json.start == obj.start && model_json.text == obj.text; }).length ) {
      model_json['help_message'] = '';
      model_json['instructions_link'] = '';
      incorrect_counter++;

      /*
      * Overlaps (start or before) check
      */
      if( _.filter(answers, function(answer) {
        return  model_json.start < answer.start &&
                _.str.include(model_json.text, answer.text); }).length ) {
        model_json.help_message = "(Please check that your selection <strong>only</strong> includes required terms)";
      }

      if( _.filter(answers, function(answer) {
        return  model_json.start >= answer.start &&
                model_json.start+model_json.text.length > answer.start+answer.text.length &&
                _.str.include(model_json.text, answer.text); }).length ) {
        model_json.help_message = "(Please check that your selection <strong>only</strong> includes required terms)";
      }

      /*
      * Contains check
      */
      if( _.filter(answers, function(answer) {
        return  model_json.start >= answer.start &&
                model_json.start+model_json.text.length <= answer.start+answer.text.length &&
                _.str.include(answer.text, model_json.text); }).length ) {
        model_json.help_message = "(Please check that your selection contains <strong>all</strong> required words)";
      }

      if(incorrect_counter >= 3) { model_json.instructions_link = 'Having trouble? View full <a data-toggle="modal" data-target="#instructionsModal">instruction set</a>.'; }

      var specific_message = check_common_mistakes(model_json.text);
      if(specific_message.length) {
        model_json.help_message = specific_message;
      }

      var temp = _.template($('#alert-template').html());
      $('#quest-alerts').fadeOut('fast', function() {
        $(this).html(temp(model_json));
        $(this).fadeIn('fast');
      });


      setTimeout(function() {
        var first_word = model.get('words').first();
        first_word.trigger('unclick');
      }, 50);

    } else {
      incorrect_counter = 0;
      $('#quest-alerts').fadeOut('fast');
      validation_check(collection);
    };
  });
  YPet.getRegion().currentView.collection.parentDocument.get('annotations').on('remove', function(model, collection) { validation_check(collection); });
